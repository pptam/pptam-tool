{{- if .Values.global.mongodb.sharding.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-init-script
data:
    init_social_network.py: |
        import time
        import logging
        from collections import namedtuple
        from typing import Any, Dict
        import pymongo

        CollectionSettings = namedtuple('CollectionSettings', 'db name index_key')

        logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s", handlers=[logging.StreamHandler()])
        log = logging.getLogger()

        connection_url = "mongodb://{{ .Values.global.mongodb.sharding.svc.user }}:{{ .Values.global.mongodb.sharding.svc.password }}@{{ .Values.global.mongodb.sharding.svc.name }}:{{ .Values.global.mongodb.sharding.svc.port }}"

        collections_settings = [
            CollectionSettings('media', 'media', 'media_id'),
            CollectionSettings('post', 'post', 'post_id'),
            CollectionSettings('social-graph', 'social-graph', 'user_id'),
            CollectionSettings('url-shorten', 'url-shorten', 'shortened_url'),
            CollectionSettings('user', 'user', 'user_id'),
            CollectionSettings('user-timeline', 'user-timeline', 'user_id'),
        ]


        def is_ok(response: Dict[str, Any]) -> bool:
            return response.get('ok', None) == 1.0


        def connect_to_mongo() -> pymongo.MongoClient:
            client = pymongo.MongoClient(connection_url)
            status = client.admin.command('ping')
            if is_ok(status):
                log.info('Connection created')
            return client


        def create_db(db: str, client: pymongo.MongoClient) -> None:
            log.info(f'Creating db: {db}')
            status = client.admin.command('create', db)
            if not is_ok(status):
                raise Exception('Could not create db: %s', status)
            log.info(f'DB {db} created')


        def enable_sharding(db: str, client: pymongo.MongoClient) -> None:
            log.info(f'Enable sharding for: {db}')            
            status = client.admin.command('enableSharding', db)
            if not is_ok(status):
                raise Exception('Could not enable sharding: %s', status)
            log.info(f'Sharding enabled for {db}')


        def shard_collection(settings: CollectionSettings, client: pymongo.MongoClient) -> None:
            log.info(f'Sharding collection : {settings.db}.{settings.name}')                 
            status = client.admin.command({
                'shardCollection': f'{settings.db}.{settings.name}',
                'key': {
                    settings.index_key: 'hashed'
                }
            })
            if not is_ok(status):
                raise Exception('Could not shard collection: %s', status)
            log.info(f'Collection {settings.db}.{settings.name} sharded')


        def setup_mongo() -> None:
            while True:
                try:
                    client = connect_to_mongo()
                    for settings in collections_settings:
                        create_db(settings.db, client)
                        enable_sharding(settings.db, client)
                        shard_collection(settings, client)
                    return
                except Exception as ex:
                    log.error('Could not setup sharding, retrying... ({})'.format(ex))
                    time.sleep(5)


        setup_mongo()

{{- end }}