{{- if .Values.global.redis.cluster.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-readiness-script
data:
    redis_readiness_check.py: |
        import logging
        from time import sleep
        from typing import Optional
        from redis import RedisCluster
        from redis.exceptions import RedisClusterException

        logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s", handlers=[logging.StreamHandler()])
        log = logging.getLogger()

        redis_cluster_uri: str = "{{ .Release.Name }}-redis-cluster"
        redis_cluster_is_ready: bool = False
        redis_cluster_connection: Optional[RedisCluster] = None

        while True:
            try:
                redis_cluster_connection = RedisCluster(host=redis_cluster_uri)
                redis_cluster_connection.ping()
                break
            except Exception as ex:
                log.exception(f"Could not connect to Redis Cluster. Sleeping for 5 seconds")
                sleep(5)

        assert isinstance(redis_cluster_connection, RedisCluster)

        while not redis_cluster_is_ready:
            redis_cluster_is_ready = True
            cluster_info = redis_cluster_connection.cluster_info(target_nodes=RedisCluster.ALL_NODES)
            for node, status in cluster_info.items():
                cluster_state = status.get("cluster_state")
                log.info(f"cluster {node} -> cluster state: {cluster_state}")
                if not cluster_state or cluster_state != "ok":
                    redis_cluster_is_ready = False
            sleep(5)

        log.info("Redis Cluster is configured and ready to use!")
{{- end }}