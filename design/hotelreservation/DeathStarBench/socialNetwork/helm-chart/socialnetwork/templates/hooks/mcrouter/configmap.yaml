{{- if .Values.global.memcached.cluster.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: mcrouter-configmap
data:
    update_config_map.sh: |
        #!/bin/bash

        NAMESPACE={{ .Release.Namespace }}
        RELEASE={{ .Release.Name }}
        PORT=11211

        kubectl rollout status --watch --timeout=600s statefulset/$RELEASE-mcrouter
        kubectl rollout status --watch --timeout=600s statefulset/$RELEASE-memcached

        memcached_pod_svc=''
        memcached_pods_list=()
        mcrouter_config_map=$(kubectl get configmap -l app=mcrouter -o custom-columns=NAME:.metadata.name --no-headers -n ${NAMESPACE})
        mcrouter_stateful_set=$(kubectl get statefulset -l app=mcrouter -o custom-columns=NAME:.metadata.name --no-headers -n ${NAMESPACE})
        memcached_pods=$(kubectl get po -l app.kubernetes.io/name=memcached -o custom-columns=NAME:.spec.hostname --no-headers -n ${NAMESPACE})
        memcached_svc=$(kubectl get svc -l app.kubernetes.io/name=memcached -o custom-columns=NAME:.metadata.name --no-headers -n ${NAMESPACE})

        index=0
        for value in $memcached_pods; do
            memcached_pods_list[$index]=$(echo \"${value}.${memcached_svc}:11211\")
            ((index++))
        done

        memcached_pod_svc=$( IFS=','; echo "${memcached_pods_list[*]}" )

        echo 'Generating new config.json with following list of memcached nodes->' $memcached_pod_svc
        config=$(sed 's/"MEMCACHED_SERVERS_LIST"/'"$memcached_pod_svc"'/g' /tmp/config_template.json)
        echo $config > /scratch/config.json

        echo 'Generating new config map ->' $mcrouter_config_map
        kubectl create configmap $mcrouter_config_map --from-file=/scratch/config.json --dry-run=client -o yaml | kubectl apply -f -

        echo 'Restarting statefulset ->' $RELEASE-mcrouter
        kubectl rollout restart statefulset $RELEASE-mcrouter

        echo 'Waiting for statefulset to be ready ->' $RELEASE-mcrouter
        kubectl rollout status --watch --timeout=600s statefulset/$RELEASE-mcrouter

    config_template.json: |
        {
            "pools": {
            "A": {
                "servers": [
                    "MEMCACHED_SERVERS_LIST"
                ]
            }
            },
            "route": {
            "type": "OperationSelectorRoute",
            "default_policy": "PoolRoute|A",
            "operation_policies": {
                    "add": "AllFastestRoute|Pool|A",
                    "delete": "AllFastestRoute|Pool|A",
                    "get": "LatestRoute|Pool|A",
                    "set": "AllFastestRoute|Pool|A"
                }
            }
        }    

{{- end }}