// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "UserReviewService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::media_service;

class UserReviewServiceHandler : virtual public UserReviewServiceIf {
 public:
  UserReviewServiceHandler() {
    // Your initialization goes here
  }

  void UploadUserReview(const int64_t req_id, const int64_t user_id, const int64_t review_id, const int64_t timestamp, const std::map<std::string, std::string> & carrier) {
    // Your implementation goes here
    printf("UploadUserReview\n");
  }

  void ReadUserReviews(std::vector<Review> & _return, const int64_t req_id, const int64_t user_id, const int32_t start, const int32_t stop, const std::map<std::string, std::string> & carrier) {
    // Your implementation goes here
    printf("ReadUserReviews\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<UserReviewServiceHandler> handler(new UserReviewServiceHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new UserReviewServiceProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

