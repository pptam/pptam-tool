/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef PageService_H
#define PageService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "media_service_types.h"

namespace media_service {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class PageServiceIf {
 public:
  virtual ~PageServiceIf() {}
  virtual void ReadPage(Page& _return, const int64_t req_id, const std::string& movie_id, const int32_t review_start, const int32_t review_stop, const std::map<std::string, std::string> & carrier) = 0;
};

class PageServiceIfFactory {
 public:
  typedef PageServiceIf Handler;

  virtual ~PageServiceIfFactory() {}

  virtual PageServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(PageServiceIf* /* handler */) = 0;
};

class PageServiceIfSingletonFactory : virtual public PageServiceIfFactory {
 public:
  PageServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<PageServiceIf>& iface) : iface_(iface) {}
  virtual ~PageServiceIfSingletonFactory() {}

  virtual PageServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(PageServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<PageServiceIf> iface_;
};

class PageServiceNull : virtual public PageServiceIf {
 public:
  virtual ~PageServiceNull() {}
  void ReadPage(Page& /* _return */, const int64_t /* req_id */, const std::string& /* movie_id */, const int32_t /* review_start */, const int32_t /* review_stop */, const std::map<std::string, std::string> & /* carrier */) {
    return;
  }
};

typedef struct _PageService_ReadPage_args__isset {
  _PageService_ReadPage_args__isset() : req_id(false), movie_id(false), review_start(false), review_stop(false), carrier(false) {}
  bool req_id :1;
  bool movie_id :1;
  bool review_start :1;
  bool review_stop :1;
  bool carrier :1;
} _PageService_ReadPage_args__isset;

class PageService_ReadPage_args {
 public:

  PageService_ReadPage_args(const PageService_ReadPage_args&);
  PageService_ReadPage_args& operator=(const PageService_ReadPage_args&);
  PageService_ReadPage_args() : req_id(0), movie_id(), review_start(0), review_stop(0) {
  }

  virtual ~PageService_ReadPage_args() throw();
  int64_t req_id;
  std::string movie_id;
  int32_t review_start;
  int32_t review_stop;
  std::map<std::string, std::string>  carrier;

  _PageService_ReadPage_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_movie_id(const std::string& val);

  void __set_review_start(const int32_t val);

  void __set_review_stop(const int32_t val);

  void __set_carrier(const std::map<std::string, std::string> & val);

  bool operator == (const PageService_ReadPage_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(movie_id == rhs.movie_id))
      return false;
    if (!(review_start == rhs.review_start))
      return false;
    if (!(review_stop == rhs.review_stop))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    return true;
  }
  bool operator != (const PageService_ReadPage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PageService_ReadPage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PageService_ReadPage_pargs {
 public:


  virtual ~PageService_ReadPage_pargs() throw();
  const int64_t* req_id;
  const std::string* movie_id;
  const int32_t* review_start;
  const int32_t* review_stop;
  const std::map<std::string, std::string> * carrier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PageService_ReadPage_result__isset {
  _PageService_ReadPage_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _PageService_ReadPage_result__isset;

class PageService_ReadPage_result {
 public:

  PageService_ReadPage_result(const PageService_ReadPage_result&);
  PageService_ReadPage_result& operator=(const PageService_ReadPage_result&);
  PageService_ReadPage_result() {
  }

  virtual ~PageService_ReadPage_result() throw();
  Page success;
  ServiceException se;

  _PageService_ReadPage_result__isset __isset;

  void __set_success(const Page& val);

  void __set_se(const ServiceException& val);

  bool operator == (const PageService_ReadPage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const PageService_ReadPage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PageService_ReadPage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PageService_ReadPage_presult__isset {
  _PageService_ReadPage_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _PageService_ReadPage_presult__isset;

class PageService_ReadPage_presult {
 public:


  virtual ~PageService_ReadPage_presult() throw();
  Page* success;
  ServiceException se;

  _PageService_ReadPage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class PageServiceClient : virtual public PageServiceIf {
 public:
  PageServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  PageServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ReadPage(Page& _return, const int64_t req_id, const std::string& movie_id, const int32_t review_start, const int32_t review_stop, const std::map<std::string, std::string> & carrier);
  void send_ReadPage(const int64_t req_id, const std::string& movie_id, const int32_t review_start, const int32_t review_stop, const std::map<std::string, std::string> & carrier);
  void recv_ReadPage(Page& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class PageServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<PageServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (PageServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ReadPage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  PageServiceProcessor(::apache::thrift::stdcxx::shared_ptr<PageServiceIf> iface) :
    iface_(iface) {
    processMap_["ReadPage"] = &PageServiceProcessor::process_ReadPage;
  }

  virtual ~PageServiceProcessor() {}
};

class PageServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  PageServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< PageServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< PageServiceIfFactory > handlerFactory_;
};

class PageServiceMultiface : virtual public PageServiceIf {
 public:
  PageServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<PageServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~PageServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<PageServiceIf> > ifaces_;
  PageServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<PageServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ReadPage(Page& _return, const int64_t req_id, const std::string& movie_id, const int32_t review_start, const int32_t review_stop, const std::map<std::string, std::string> & carrier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReadPage(_return, req_id, movie_id, review_start, review_stop, carrier);
    }
    ifaces_[i]->ReadPage(_return, req_id, movie_id, review_start, review_stop, carrier);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class PageServiceConcurrentClient : virtual public PageServiceIf {
 public:
  PageServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  PageServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ReadPage(Page& _return, const int64_t req_id, const std::string& movie_id, const int32_t review_start, const int32_t review_stop, const std::map<std::string, std::string> & carrier);
  int32_t send_ReadPage(const int64_t req_id, const std::string& movie_id, const int32_t review_start, const int32_t review_stop, const std::map<std::string, std::string> & carrier);
  void recv_ReadPage(Page& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
