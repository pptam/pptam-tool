/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ReviewStorageService_H
#define ReviewStorageService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "media_service_types.h"

namespace media_service {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ReviewStorageServiceIf {
 public:
  virtual ~ReviewStorageServiceIf() {}
  virtual void StoreReview(const int64_t req_id, const Review& review, const std::map<std::string, std::string> & carrier) = 0;
  virtual void ReadReviews(std::vector<Review> & _return, const int64_t req_id, const std::vector<int64_t> & review_ids, const std::map<std::string, std::string> & carrier) = 0;
};

class ReviewStorageServiceIfFactory {
 public:
  typedef ReviewStorageServiceIf Handler;

  virtual ~ReviewStorageServiceIfFactory() {}

  virtual ReviewStorageServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ReviewStorageServiceIf* /* handler */) = 0;
};

class ReviewStorageServiceIfSingletonFactory : virtual public ReviewStorageServiceIfFactory {
 public:
  ReviewStorageServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<ReviewStorageServiceIf>& iface) : iface_(iface) {}
  virtual ~ReviewStorageServiceIfSingletonFactory() {}

  virtual ReviewStorageServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ReviewStorageServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<ReviewStorageServiceIf> iface_;
};

class ReviewStorageServiceNull : virtual public ReviewStorageServiceIf {
 public:
  virtual ~ReviewStorageServiceNull() {}
  void StoreReview(const int64_t /* req_id */, const Review& /* review */, const std::map<std::string, std::string> & /* carrier */) {
    return;
  }
  void ReadReviews(std::vector<Review> & /* _return */, const int64_t /* req_id */, const std::vector<int64_t> & /* review_ids */, const std::map<std::string, std::string> & /* carrier */) {
    return;
  }
};

typedef struct _ReviewStorageService_StoreReview_args__isset {
  _ReviewStorageService_StoreReview_args__isset() : req_id(false), review(false), carrier(false) {}
  bool req_id :1;
  bool review :1;
  bool carrier :1;
} _ReviewStorageService_StoreReview_args__isset;

class ReviewStorageService_StoreReview_args {
 public:

  ReviewStorageService_StoreReview_args(const ReviewStorageService_StoreReview_args&);
  ReviewStorageService_StoreReview_args& operator=(const ReviewStorageService_StoreReview_args&);
  ReviewStorageService_StoreReview_args() : req_id(0) {
  }

  virtual ~ReviewStorageService_StoreReview_args() throw();
  int64_t req_id;
  Review review;
  std::map<std::string, std::string>  carrier;

  _ReviewStorageService_StoreReview_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_review(const Review& val);

  void __set_carrier(const std::map<std::string, std::string> & val);

  bool operator == (const ReviewStorageService_StoreReview_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(review == rhs.review))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    return true;
  }
  bool operator != (const ReviewStorageService_StoreReview_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReviewStorageService_StoreReview_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ReviewStorageService_StoreReview_pargs {
 public:


  virtual ~ReviewStorageService_StoreReview_pargs() throw();
  const int64_t* req_id;
  const Review* review;
  const std::map<std::string, std::string> * carrier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ReviewStorageService_StoreReview_result__isset {
  _ReviewStorageService_StoreReview_result__isset() : se(false) {}
  bool se :1;
} _ReviewStorageService_StoreReview_result__isset;

class ReviewStorageService_StoreReview_result {
 public:

  ReviewStorageService_StoreReview_result(const ReviewStorageService_StoreReview_result&);
  ReviewStorageService_StoreReview_result& operator=(const ReviewStorageService_StoreReview_result&);
  ReviewStorageService_StoreReview_result() {
  }

  virtual ~ReviewStorageService_StoreReview_result() throw();
  ServiceException se;

  _ReviewStorageService_StoreReview_result__isset __isset;

  void __set_se(const ServiceException& val);

  bool operator == (const ReviewStorageService_StoreReview_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const ReviewStorageService_StoreReview_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReviewStorageService_StoreReview_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ReviewStorageService_StoreReview_presult__isset {
  _ReviewStorageService_StoreReview_presult__isset() : se(false) {}
  bool se :1;
} _ReviewStorageService_StoreReview_presult__isset;

class ReviewStorageService_StoreReview_presult {
 public:


  virtual ~ReviewStorageService_StoreReview_presult() throw();
  ServiceException se;

  _ReviewStorageService_StoreReview_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ReviewStorageService_ReadReviews_args__isset {
  _ReviewStorageService_ReadReviews_args__isset() : req_id(false), review_ids(false), carrier(false) {}
  bool req_id :1;
  bool review_ids :1;
  bool carrier :1;
} _ReviewStorageService_ReadReviews_args__isset;

class ReviewStorageService_ReadReviews_args {
 public:

  ReviewStorageService_ReadReviews_args(const ReviewStorageService_ReadReviews_args&);
  ReviewStorageService_ReadReviews_args& operator=(const ReviewStorageService_ReadReviews_args&);
  ReviewStorageService_ReadReviews_args() : req_id(0) {
  }

  virtual ~ReviewStorageService_ReadReviews_args() throw();
  int64_t req_id;
  std::vector<int64_t>  review_ids;
  std::map<std::string, std::string>  carrier;

  _ReviewStorageService_ReadReviews_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_review_ids(const std::vector<int64_t> & val);

  void __set_carrier(const std::map<std::string, std::string> & val);

  bool operator == (const ReviewStorageService_ReadReviews_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(review_ids == rhs.review_ids))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    return true;
  }
  bool operator != (const ReviewStorageService_ReadReviews_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReviewStorageService_ReadReviews_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ReviewStorageService_ReadReviews_pargs {
 public:


  virtual ~ReviewStorageService_ReadReviews_pargs() throw();
  const int64_t* req_id;
  const std::vector<int64_t> * review_ids;
  const std::map<std::string, std::string> * carrier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ReviewStorageService_ReadReviews_result__isset {
  _ReviewStorageService_ReadReviews_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _ReviewStorageService_ReadReviews_result__isset;

class ReviewStorageService_ReadReviews_result {
 public:

  ReviewStorageService_ReadReviews_result(const ReviewStorageService_ReadReviews_result&);
  ReviewStorageService_ReadReviews_result& operator=(const ReviewStorageService_ReadReviews_result&);
  ReviewStorageService_ReadReviews_result() {
  }

  virtual ~ReviewStorageService_ReadReviews_result() throw();
  std::vector<Review>  success;
  ServiceException se;

  _ReviewStorageService_ReadReviews_result__isset __isset;

  void __set_success(const std::vector<Review> & val);

  void __set_se(const ServiceException& val);

  bool operator == (const ReviewStorageService_ReadReviews_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const ReviewStorageService_ReadReviews_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReviewStorageService_ReadReviews_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ReviewStorageService_ReadReviews_presult__isset {
  _ReviewStorageService_ReadReviews_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _ReviewStorageService_ReadReviews_presult__isset;

class ReviewStorageService_ReadReviews_presult {
 public:


  virtual ~ReviewStorageService_ReadReviews_presult() throw();
  std::vector<Review> * success;
  ServiceException se;

  _ReviewStorageService_ReadReviews_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ReviewStorageServiceClient : virtual public ReviewStorageServiceIf {
 public:
  ReviewStorageServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ReviewStorageServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void StoreReview(const int64_t req_id, const Review& review, const std::map<std::string, std::string> & carrier);
  void send_StoreReview(const int64_t req_id, const Review& review, const std::map<std::string, std::string> & carrier);
  void recv_StoreReview();
  void ReadReviews(std::vector<Review> & _return, const int64_t req_id, const std::vector<int64_t> & review_ids, const std::map<std::string, std::string> & carrier);
  void send_ReadReviews(const int64_t req_id, const std::vector<int64_t> & review_ids, const std::map<std::string, std::string> & carrier);
  void recv_ReadReviews(std::vector<Review> & _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ReviewStorageServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<ReviewStorageServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ReviewStorageServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_StoreReview(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReadReviews(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ReviewStorageServiceProcessor(::apache::thrift::stdcxx::shared_ptr<ReviewStorageServiceIf> iface) :
    iface_(iface) {
    processMap_["StoreReview"] = &ReviewStorageServiceProcessor::process_StoreReview;
    processMap_["ReadReviews"] = &ReviewStorageServiceProcessor::process_ReadReviews;
  }

  virtual ~ReviewStorageServiceProcessor() {}
};

class ReviewStorageServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ReviewStorageServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< ReviewStorageServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< ReviewStorageServiceIfFactory > handlerFactory_;
};

class ReviewStorageServiceMultiface : virtual public ReviewStorageServiceIf {
 public:
  ReviewStorageServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<ReviewStorageServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ReviewStorageServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<ReviewStorageServiceIf> > ifaces_;
  ReviewStorageServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<ReviewStorageServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void StoreReview(const int64_t req_id, const Review& review, const std::map<std::string, std::string> & carrier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->StoreReview(req_id, review, carrier);
    }
    ifaces_[i]->StoreReview(req_id, review, carrier);
  }

  void ReadReviews(std::vector<Review> & _return, const int64_t req_id, const std::vector<int64_t> & review_ids, const std::map<std::string, std::string> & carrier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReadReviews(_return, req_id, review_ids, carrier);
    }
    ifaces_[i]->ReadReviews(_return, req_id, review_ids, carrier);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ReviewStorageServiceConcurrentClient : virtual public ReviewStorageServiceIf {
 public:
  ReviewStorageServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ReviewStorageServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void StoreReview(const int64_t req_id, const Review& review, const std::map<std::string, std::string> & carrier);
  int32_t send_StoreReview(const int64_t req_id, const Review& review, const std::map<std::string, std::string> & carrier);
  void recv_StoreReview(const int32_t seqid);
  void ReadReviews(std::vector<Review> & _return, const int64_t req_id, const std::vector<int64_t> & review_ids, const std::map<std::string, std::string> & carrier);
  int32_t send_ReadReviews(const int64_t req_id, const std::vector<int64_t> & review_ids, const std::map<std::string, std::string> & carrier);
  void recv_ReadReviews(std::vector<Review> & _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
