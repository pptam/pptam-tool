/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef PlotService_H
#define PlotService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "media_service_types.h"

namespace media_service {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class PlotServiceIf {
 public:
  virtual ~PlotServiceIf() {}
  virtual void WritePlot(const int64_t req_id, const int64_t plot_id, const std::string& plot, const std::map<std::string, std::string> & carrier) = 0;
  virtual void ReadPlot(std::string& _return, const int64_t req_id, const int64_t plot_id, const std::map<std::string, std::string> & carrier) = 0;
};

class PlotServiceIfFactory {
 public:
  typedef PlotServiceIf Handler;

  virtual ~PlotServiceIfFactory() {}

  virtual PlotServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(PlotServiceIf* /* handler */) = 0;
};

class PlotServiceIfSingletonFactory : virtual public PlotServiceIfFactory {
 public:
  PlotServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<PlotServiceIf>& iface) : iface_(iface) {}
  virtual ~PlotServiceIfSingletonFactory() {}

  virtual PlotServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(PlotServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<PlotServiceIf> iface_;
};

class PlotServiceNull : virtual public PlotServiceIf {
 public:
  virtual ~PlotServiceNull() {}
  void WritePlot(const int64_t /* req_id */, const int64_t /* plot_id */, const std::string& /* plot */, const std::map<std::string, std::string> & /* carrier */) {
    return;
  }
  void ReadPlot(std::string& /* _return */, const int64_t /* req_id */, const int64_t /* plot_id */, const std::map<std::string, std::string> & /* carrier */) {
    return;
  }
};

typedef struct _PlotService_WritePlot_args__isset {
  _PlotService_WritePlot_args__isset() : req_id(false), plot_id(false), plot(false), carrier(false) {}
  bool req_id :1;
  bool plot_id :1;
  bool plot :1;
  bool carrier :1;
} _PlotService_WritePlot_args__isset;

class PlotService_WritePlot_args {
 public:

  PlotService_WritePlot_args(const PlotService_WritePlot_args&);
  PlotService_WritePlot_args& operator=(const PlotService_WritePlot_args&);
  PlotService_WritePlot_args() : req_id(0), plot_id(0), plot() {
  }

  virtual ~PlotService_WritePlot_args() throw();
  int64_t req_id;
  int64_t plot_id;
  std::string plot;
  std::map<std::string, std::string>  carrier;

  _PlotService_WritePlot_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_plot_id(const int64_t val);

  void __set_plot(const std::string& val);

  void __set_carrier(const std::map<std::string, std::string> & val);

  bool operator == (const PlotService_WritePlot_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(plot_id == rhs.plot_id))
      return false;
    if (!(plot == rhs.plot))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    return true;
  }
  bool operator != (const PlotService_WritePlot_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlotService_WritePlot_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlotService_WritePlot_pargs {
 public:


  virtual ~PlotService_WritePlot_pargs() throw();
  const int64_t* req_id;
  const int64_t* plot_id;
  const std::string* plot;
  const std::map<std::string, std::string> * carrier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlotService_WritePlot_result__isset {
  _PlotService_WritePlot_result__isset() : se(false) {}
  bool se :1;
} _PlotService_WritePlot_result__isset;

class PlotService_WritePlot_result {
 public:

  PlotService_WritePlot_result(const PlotService_WritePlot_result&);
  PlotService_WritePlot_result& operator=(const PlotService_WritePlot_result&);
  PlotService_WritePlot_result() {
  }

  virtual ~PlotService_WritePlot_result() throw();
  ServiceException se;

  _PlotService_WritePlot_result__isset __isset;

  void __set_se(const ServiceException& val);

  bool operator == (const PlotService_WritePlot_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const PlotService_WritePlot_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlotService_WritePlot_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlotService_WritePlot_presult__isset {
  _PlotService_WritePlot_presult__isset() : se(false) {}
  bool se :1;
} _PlotService_WritePlot_presult__isset;

class PlotService_WritePlot_presult {
 public:


  virtual ~PlotService_WritePlot_presult() throw();
  ServiceException se;

  _PlotService_WritePlot_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PlotService_ReadPlot_args__isset {
  _PlotService_ReadPlot_args__isset() : req_id(false), plot_id(false), carrier(false) {}
  bool req_id :1;
  bool plot_id :1;
  bool carrier :1;
} _PlotService_ReadPlot_args__isset;

class PlotService_ReadPlot_args {
 public:

  PlotService_ReadPlot_args(const PlotService_ReadPlot_args&);
  PlotService_ReadPlot_args& operator=(const PlotService_ReadPlot_args&);
  PlotService_ReadPlot_args() : req_id(0), plot_id(0) {
  }

  virtual ~PlotService_ReadPlot_args() throw();
  int64_t req_id;
  int64_t plot_id;
  std::map<std::string, std::string>  carrier;

  _PlotService_ReadPlot_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_plot_id(const int64_t val);

  void __set_carrier(const std::map<std::string, std::string> & val);

  bool operator == (const PlotService_ReadPlot_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(plot_id == rhs.plot_id))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    return true;
  }
  bool operator != (const PlotService_ReadPlot_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlotService_ReadPlot_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlotService_ReadPlot_pargs {
 public:


  virtual ~PlotService_ReadPlot_pargs() throw();
  const int64_t* req_id;
  const int64_t* plot_id;
  const std::map<std::string, std::string> * carrier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlotService_ReadPlot_result__isset {
  _PlotService_ReadPlot_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _PlotService_ReadPlot_result__isset;

class PlotService_ReadPlot_result {
 public:

  PlotService_ReadPlot_result(const PlotService_ReadPlot_result&);
  PlotService_ReadPlot_result& operator=(const PlotService_ReadPlot_result&);
  PlotService_ReadPlot_result() : success() {
  }

  virtual ~PlotService_ReadPlot_result() throw();
  std::string success;
  ServiceException se;

  _PlotService_ReadPlot_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_se(const ServiceException& val);

  bool operator == (const PlotService_ReadPlot_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const PlotService_ReadPlot_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlotService_ReadPlot_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlotService_ReadPlot_presult__isset {
  _PlotService_ReadPlot_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _PlotService_ReadPlot_presult__isset;

class PlotService_ReadPlot_presult {
 public:


  virtual ~PlotService_ReadPlot_presult() throw();
  std::string* success;
  ServiceException se;

  _PlotService_ReadPlot_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class PlotServiceClient : virtual public PlotServiceIf {
 public:
  PlotServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  PlotServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void WritePlot(const int64_t req_id, const int64_t plot_id, const std::string& plot, const std::map<std::string, std::string> & carrier);
  void send_WritePlot(const int64_t req_id, const int64_t plot_id, const std::string& plot, const std::map<std::string, std::string> & carrier);
  void recv_WritePlot();
  void ReadPlot(std::string& _return, const int64_t req_id, const int64_t plot_id, const std::map<std::string, std::string> & carrier);
  void send_ReadPlot(const int64_t req_id, const int64_t plot_id, const std::map<std::string, std::string> & carrier);
  void recv_ReadPlot(std::string& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class PlotServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<PlotServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (PlotServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_WritePlot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReadPlot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  PlotServiceProcessor(::apache::thrift::stdcxx::shared_ptr<PlotServiceIf> iface) :
    iface_(iface) {
    processMap_["WritePlot"] = &PlotServiceProcessor::process_WritePlot;
    processMap_["ReadPlot"] = &PlotServiceProcessor::process_ReadPlot;
  }

  virtual ~PlotServiceProcessor() {}
};

class PlotServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  PlotServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< PlotServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< PlotServiceIfFactory > handlerFactory_;
};

class PlotServiceMultiface : virtual public PlotServiceIf {
 public:
  PlotServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<PlotServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~PlotServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<PlotServiceIf> > ifaces_;
  PlotServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<PlotServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void WritePlot(const int64_t req_id, const int64_t plot_id, const std::string& plot, const std::map<std::string, std::string> & carrier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->WritePlot(req_id, plot_id, plot, carrier);
    }
    ifaces_[i]->WritePlot(req_id, plot_id, plot, carrier);
  }

  void ReadPlot(std::string& _return, const int64_t req_id, const int64_t plot_id, const std::map<std::string, std::string> & carrier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReadPlot(_return, req_id, plot_id, carrier);
    }
    ifaces_[i]->ReadPlot(_return, req_id, plot_id, carrier);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class PlotServiceConcurrentClient : virtual public PlotServiceIf {
 public:
  PlotServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  PlotServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void WritePlot(const int64_t req_id, const int64_t plot_id, const std::string& plot, const std::map<std::string, std::string> & carrier);
  int32_t send_WritePlot(const int64_t req_id, const int64_t plot_id, const std::string& plot, const std::map<std::string, std::string> & carrier);
  void recv_WritePlot(const int32_t seqid);
  void ReadPlot(std::string& _return, const int64_t req_id, const int64_t plot_id, const std::map<std::string, std::string> & carrier);
  int32_t send_ReadPlot(const int64_t req_id, const int64_t plot_id, const std::map<std::string, std::string> & carrier);
  void recv_ReadPlot(std::string& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
