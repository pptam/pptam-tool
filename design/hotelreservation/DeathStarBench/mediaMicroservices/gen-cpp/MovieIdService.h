/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MovieIdService_H
#define MovieIdService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "media_service_types.h"

namespace media_service {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MovieIdServiceIf {
 public:
  virtual ~MovieIdServiceIf() {}
  virtual void UploadMovieId(const int64_t req_id, const std::string& title, const int32_t rating, const std::map<std::string, std::string> & carrier) = 0;
  virtual void RegisterMovieId(const int64_t req_id, const std::string& title, const std::string& movie_id, const std::map<std::string, std::string> & carrier) = 0;
};

class MovieIdServiceIfFactory {
 public:
  typedef MovieIdServiceIf Handler;

  virtual ~MovieIdServiceIfFactory() {}

  virtual MovieIdServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MovieIdServiceIf* /* handler */) = 0;
};

class MovieIdServiceIfSingletonFactory : virtual public MovieIdServiceIfFactory {
 public:
  MovieIdServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<MovieIdServiceIf>& iface) : iface_(iface) {}
  virtual ~MovieIdServiceIfSingletonFactory() {}

  virtual MovieIdServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MovieIdServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<MovieIdServiceIf> iface_;
};

class MovieIdServiceNull : virtual public MovieIdServiceIf {
 public:
  virtual ~MovieIdServiceNull() {}
  void UploadMovieId(const int64_t /* req_id */, const std::string& /* title */, const int32_t /* rating */, const std::map<std::string, std::string> & /* carrier */) {
    return;
  }
  void RegisterMovieId(const int64_t /* req_id */, const std::string& /* title */, const std::string& /* movie_id */, const std::map<std::string, std::string> & /* carrier */) {
    return;
  }
};

typedef struct _MovieIdService_UploadMovieId_args__isset {
  _MovieIdService_UploadMovieId_args__isset() : req_id(false), title(false), rating(false), carrier(false) {}
  bool req_id :1;
  bool title :1;
  bool rating :1;
  bool carrier :1;
} _MovieIdService_UploadMovieId_args__isset;

class MovieIdService_UploadMovieId_args {
 public:

  MovieIdService_UploadMovieId_args(const MovieIdService_UploadMovieId_args&);
  MovieIdService_UploadMovieId_args& operator=(const MovieIdService_UploadMovieId_args&);
  MovieIdService_UploadMovieId_args() : req_id(0), title(), rating(0) {
  }

  virtual ~MovieIdService_UploadMovieId_args() throw();
  int64_t req_id;
  std::string title;
  int32_t rating;
  std::map<std::string, std::string>  carrier;

  _MovieIdService_UploadMovieId_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_title(const std::string& val);

  void __set_rating(const int32_t val);

  void __set_carrier(const std::map<std::string, std::string> & val);

  bool operator == (const MovieIdService_UploadMovieId_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(rating == rhs.rating))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    return true;
  }
  bool operator != (const MovieIdService_UploadMovieId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MovieIdService_UploadMovieId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MovieIdService_UploadMovieId_pargs {
 public:


  virtual ~MovieIdService_UploadMovieId_pargs() throw();
  const int64_t* req_id;
  const std::string* title;
  const int32_t* rating;
  const std::map<std::string, std::string> * carrier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MovieIdService_UploadMovieId_result__isset {
  _MovieIdService_UploadMovieId_result__isset() : se(false) {}
  bool se :1;
} _MovieIdService_UploadMovieId_result__isset;

class MovieIdService_UploadMovieId_result {
 public:

  MovieIdService_UploadMovieId_result(const MovieIdService_UploadMovieId_result&);
  MovieIdService_UploadMovieId_result& operator=(const MovieIdService_UploadMovieId_result&);
  MovieIdService_UploadMovieId_result() {
  }

  virtual ~MovieIdService_UploadMovieId_result() throw();
  ServiceException se;

  _MovieIdService_UploadMovieId_result__isset __isset;

  void __set_se(const ServiceException& val);

  bool operator == (const MovieIdService_UploadMovieId_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const MovieIdService_UploadMovieId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MovieIdService_UploadMovieId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MovieIdService_UploadMovieId_presult__isset {
  _MovieIdService_UploadMovieId_presult__isset() : se(false) {}
  bool se :1;
} _MovieIdService_UploadMovieId_presult__isset;

class MovieIdService_UploadMovieId_presult {
 public:


  virtual ~MovieIdService_UploadMovieId_presult() throw();
  ServiceException se;

  _MovieIdService_UploadMovieId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MovieIdService_RegisterMovieId_args__isset {
  _MovieIdService_RegisterMovieId_args__isset() : req_id(false), title(false), movie_id(false), carrier(false) {}
  bool req_id :1;
  bool title :1;
  bool movie_id :1;
  bool carrier :1;
} _MovieIdService_RegisterMovieId_args__isset;

class MovieIdService_RegisterMovieId_args {
 public:

  MovieIdService_RegisterMovieId_args(const MovieIdService_RegisterMovieId_args&);
  MovieIdService_RegisterMovieId_args& operator=(const MovieIdService_RegisterMovieId_args&);
  MovieIdService_RegisterMovieId_args() : req_id(0), title(), movie_id() {
  }

  virtual ~MovieIdService_RegisterMovieId_args() throw();
  int64_t req_id;
  std::string title;
  std::string movie_id;
  std::map<std::string, std::string>  carrier;

  _MovieIdService_RegisterMovieId_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_title(const std::string& val);

  void __set_movie_id(const std::string& val);

  void __set_carrier(const std::map<std::string, std::string> & val);

  bool operator == (const MovieIdService_RegisterMovieId_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(movie_id == rhs.movie_id))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    return true;
  }
  bool operator != (const MovieIdService_RegisterMovieId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MovieIdService_RegisterMovieId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MovieIdService_RegisterMovieId_pargs {
 public:


  virtual ~MovieIdService_RegisterMovieId_pargs() throw();
  const int64_t* req_id;
  const std::string* title;
  const std::string* movie_id;
  const std::map<std::string, std::string> * carrier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MovieIdService_RegisterMovieId_result__isset {
  _MovieIdService_RegisterMovieId_result__isset() : se(false) {}
  bool se :1;
} _MovieIdService_RegisterMovieId_result__isset;

class MovieIdService_RegisterMovieId_result {
 public:

  MovieIdService_RegisterMovieId_result(const MovieIdService_RegisterMovieId_result&);
  MovieIdService_RegisterMovieId_result& operator=(const MovieIdService_RegisterMovieId_result&);
  MovieIdService_RegisterMovieId_result() {
  }

  virtual ~MovieIdService_RegisterMovieId_result() throw();
  ServiceException se;

  _MovieIdService_RegisterMovieId_result__isset __isset;

  void __set_se(const ServiceException& val);

  bool operator == (const MovieIdService_RegisterMovieId_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const MovieIdService_RegisterMovieId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MovieIdService_RegisterMovieId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MovieIdService_RegisterMovieId_presult__isset {
  _MovieIdService_RegisterMovieId_presult__isset() : se(false) {}
  bool se :1;
} _MovieIdService_RegisterMovieId_presult__isset;

class MovieIdService_RegisterMovieId_presult {
 public:


  virtual ~MovieIdService_RegisterMovieId_presult() throw();
  ServiceException se;

  _MovieIdService_RegisterMovieId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MovieIdServiceClient : virtual public MovieIdServiceIf {
 public:
  MovieIdServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MovieIdServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void UploadMovieId(const int64_t req_id, const std::string& title, const int32_t rating, const std::map<std::string, std::string> & carrier);
  void send_UploadMovieId(const int64_t req_id, const std::string& title, const int32_t rating, const std::map<std::string, std::string> & carrier);
  void recv_UploadMovieId();
  void RegisterMovieId(const int64_t req_id, const std::string& title, const std::string& movie_id, const std::map<std::string, std::string> & carrier);
  void send_RegisterMovieId(const int64_t req_id, const std::string& title, const std::string& movie_id, const std::map<std::string, std::string> & carrier);
  void recv_RegisterMovieId();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MovieIdServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<MovieIdServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MovieIdServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_UploadMovieId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RegisterMovieId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MovieIdServiceProcessor(::apache::thrift::stdcxx::shared_ptr<MovieIdServiceIf> iface) :
    iface_(iface) {
    processMap_["UploadMovieId"] = &MovieIdServiceProcessor::process_UploadMovieId;
    processMap_["RegisterMovieId"] = &MovieIdServiceProcessor::process_RegisterMovieId;
  }

  virtual ~MovieIdServiceProcessor() {}
};

class MovieIdServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MovieIdServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< MovieIdServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< MovieIdServiceIfFactory > handlerFactory_;
};

class MovieIdServiceMultiface : virtual public MovieIdServiceIf {
 public:
  MovieIdServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<MovieIdServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MovieIdServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<MovieIdServiceIf> > ifaces_;
  MovieIdServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<MovieIdServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void UploadMovieId(const int64_t req_id, const std::string& title, const int32_t rating, const std::map<std::string, std::string> & carrier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UploadMovieId(req_id, title, rating, carrier);
    }
    ifaces_[i]->UploadMovieId(req_id, title, rating, carrier);
  }

  void RegisterMovieId(const int64_t req_id, const std::string& title, const std::string& movie_id, const std::map<std::string, std::string> & carrier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RegisterMovieId(req_id, title, movie_id, carrier);
    }
    ifaces_[i]->RegisterMovieId(req_id, title, movie_id, carrier);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MovieIdServiceConcurrentClient : virtual public MovieIdServiceIf {
 public:
  MovieIdServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MovieIdServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void UploadMovieId(const int64_t req_id, const std::string& title, const int32_t rating, const std::map<std::string, std::string> & carrier);
  int32_t send_UploadMovieId(const int64_t req_id, const std::string& title, const int32_t rating, const std::map<std::string, std::string> & carrier);
  void recv_UploadMovieId(const int32_t seqid);
  void RegisterMovieId(const int64_t req_id, const std::string& title, const std::string& movie_id, const std::map<std::string, std::string> & carrier);
  int32_t send_RegisterMovieId(const int64_t req_id, const std::string& title, const std::string& movie_id, const std::map<std::string, std::string> & carrier);
  void recv_RegisterMovieId(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
