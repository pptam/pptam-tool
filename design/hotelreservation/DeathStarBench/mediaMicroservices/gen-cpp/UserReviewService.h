/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef UserReviewService_H
#define UserReviewService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "media_service_types.h"

namespace media_service {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class UserReviewServiceIf {
 public:
  virtual ~UserReviewServiceIf() {}
  virtual void UploadUserReview(const int64_t req_id, const int64_t user_id, const int64_t review_id, const int64_t timestamp, const std::map<std::string, std::string> & carrier) = 0;
  virtual void ReadUserReviews(std::vector<Review> & _return, const int64_t req_id, const int64_t user_id, const int32_t start, const int32_t stop, const std::map<std::string, std::string> & carrier) = 0;
};

class UserReviewServiceIfFactory {
 public:
  typedef UserReviewServiceIf Handler;

  virtual ~UserReviewServiceIfFactory() {}

  virtual UserReviewServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(UserReviewServiceIf* /* handler */) = 0;
};

class UserReviewServiceIfSingletonFactory : virtual public UserReviewServiceIfFactory {
 public:
  UserReviewServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<UserReviewServiceIf>& iface) : iface_(iface) {}
  virtual ~UserReviewServiceIfSingletonFactory() {}

  virtual UserReviewServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(UserReviewServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<UserReviewServiceIf> iface_;
};

class UserReviewServiceNull : virtual public UserReviewServiceIf {
 public:
  virtual ~UserReviewServiceNull() {}
  void UploadUserReview(const int64_t /* req_id */, const int64_t /* user_id */, const int64_t /* review_id */, const int64_t /* timestamp */, const std::map<std::string, std::string> & /* carrier */) {
    return;
  }
  void ReadUserReviews(std::vector<Review> & /* _return */, const int64_t /* req_id */, const int64_t /* user_id */, const int32_t /* start */, const int32_t /* stop */, const std::map<std::string, std::string> & /* carrier */) {
    return;
  }
};

typedef struct _UserReviewService_UploadUserReview_args__isset {
  _UserReviewService_UploadUserReview_args__isset() : req_id(false), user_id(false), review_id(false), timestamp(false), carrier(false) {}
  bool req_id :1;
  bool user_id :1;
  bool review_id :1;
  bool timestamp :1;
  bool carrier :1;
} _UserReviewService_UploadUserReview_args__isset;

class UserReviewService_UploadUserReview_args {
 public:

  UserReviewService_UploadUserReview_args(const UserReviewService_UploadUserReview_args&);
  UserReviewService_UploadUserReview_args& operator=(const UserReviewService_UploadUserReview_args&);
  UserReviewService_UploadUserReview_args() : req_id(0), user_id(0), review_id(0), timestamp(0) {
  }

  virtual ~UserReviewService_UploadUserReview_args() throw();
  int64_t req_id;
  int64_t user_id;
  int64_t review_id;
  int64_t timestamp;
  std::map<std::string, std::string>  carrier;

  _UserReviewService_UploadUserReview_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_user_id(const int64_t val);

  void __set_review_id(const int64_t val);

  void __set_timestamp(const int64_t val);

  void __set_carrier(const std::map<std::string, std::string> & val);

  bool operator == (const UserReviewService_UploadUserReview_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(review_id == rhs.review_id))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    return true;
  }
  bool operator != (const UserReviewService_UploadUserReview_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserReviewService_UploadUserReview_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserReviewService_UploadUserReview_pargs {
 public:


  virtual ~UserReviewService_UploadUserReview_pargs() throw();
  const int64_t* req_id;
  const int64_t* user_id;
  const int64_t* review_id;
  const int64_t* timestamp;
  const std::map<std::string, std::string> * carrier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserReviewService_UploadUserReview_result__isset {
  _UserReviewService_UploadUserReview_result__isset() : se(false) {}
  bool se :1;
} _UserReviewService_UploadUserReview_result__isset;

class UserReviewService_UploadUserReview_result {
 public:

  UserReviewService_UploadUserReview_result(const UserReviewService_UploadUserReview_result&);
  UserReviewService_UploadUserReview_result& operator=(const UserReviewService_UploadUserReview_result&);
  UserReviewService_UploadUserReview_result() {
  }

  virtual ~UserReviewService_UploadUserReview_result() throw();
  ServiceException se;

  _UserReviewService_UploadUserReview_result__isset __isset;

  void __set_se(const ServiceException& val);

  bool operator == (const UserReviewService_UploadUserReview_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const UserReviewService_UploadUserReview_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserReviewService_UploadUserReview_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserReviewService_UploadUserReview_presult__isset {
  _UserReviewService_UploadUserReview_presult__isset() : se(false) {}
  bool se :1;
} _UserReviewService_UploadUserReview_presult__isset;

class UserReviewService_UploadUserReview_presult {
 public:


  virtual ~UserReviewService_UploadUserReview_presult() throw();
  ServiceException se;

  _UserReviewService_UploadUserReview_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _UserReviewService_ReadUserReviews_args__isset {
  _UserReviewService_ReadUserReviews_args__isset() : req_id(false), user_id(false), start(false), stop(false), carrier(false) {}
  bool req_id :1;
  bool user_id :1;
  bool start :1;
  bool stop :1;
  bool carrier :1;
} _UserReviewService_ReadUserReviews_args__isset;

class UserReviewService_ReadUserReviews_args {
 public:

  UserReviewService_ReadUserReviews_args(const UserReviewService_ReadUserReviews_args&);
  UserReviewService_ReadUserReviews_args& operator=(const UserReviewService_ReadUserReviews_args&);
  UserReviewService_ReadUserReviews_args() : req_id(0), user_id(0), start(0), stop(0) {
  }

  virtual ~UserReviewService_ReadUserReviews_args() throw();
  int64_t req_id;
  int64_t user_id;
  int32_t start;
  int32_t stop;
  std::map<std::string, std::string>  carrier;

  _UserReviewService_ReadUserReviews_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_user_id(const int64_t val);

  void __set_start(const int32_t val);

  void __set_stop(const int32_t val);

  void __set_carrier(const std::map<std::string, std::string> & val);

  bool operator == (const UserReviewService_ReadUserReviews_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(start == rhs.start))
      return false;
    if (!(stop == rhs.stop))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    return true;
  }
  bool operator != (const UserReviewService_ReadUserReviews_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserReviewService_ReadUserReviews_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserReviewService_ReadUserReviews_pargs {
 public:


  virtual ~UserReviewService_ReadUserReviews_pargs() throw();
  const int64_t* req_id;
  const int64_t* user_id;
  const int32_t* start;
  const int32_t* stop;
  const std::map<std::string, std::string> * carrier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserReviewService_ReadUserReviews_result__isset {
  _UserReviewService_ReadUserReviews_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _UserReviewService_ReadUserReviews_result__isset;

class UserReviewService_ReadUserReviews_result {
 public:

  UserReviewService_ReadUserReviews_result(const UserReviewService_ReadUserReviews_result&);
  UserReviewService_ReadUserReviews_result& operator=(const UserReviewService_ReadUserReviews_result&);
  UserReviewService_ReadUserReviews_result() {
  }

  virtual ~UserReviewService_ReadUserReviews_result() throw();
  std::vector<Review>  success;
  ServiceException se;

  _UserReviewService_ReadUserReviews_result__isset __isset;

  void __set_success(const std::vector<Review> & val);

  void __set_se(const ServiceException& val);

  bool operator == (const UserReviewService_ReadUserReviews_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const UserReviewService_ReadUserReviews_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserReviewService_ReadUserReviews_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserReviewService_ReadUserReviews_presult__isset {
  _UserReviewService_ReadUserReviews_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _UserReviewService_ReadUserReviews_presult__isset;

class UserReviewService_ReadUserReviews_presult {
 public:


  virtual ~UserReviewService_ReadUserReviews_presult() throw();
  std::vector<Review> * success;
  ServiceException se;

  _UserReviewService_ReadUserReviews_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class UserReviewServiceClient : virtual public UserReviewServiceIf {
 public:
  UserReviewServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  UserReviewServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void UploadUserReview(const int64_t req_id, const int64_t user_id, const int64_t review_id, const int64_t timestamp, const std::map<std::string, std::string> & carrier);
  void send_UploadUserReview(const int64_t req_id, const int64_t user_id, const int64_t review_id, const int64_t timestamp, const std::map<std::string, std::string> & carrier);
  void recv_UploadUserReview();
  void ReadUserReviews(std::vector<Review> & _return, const int64_t req_id, const int64_t user_id, const int32_t start, const int32_t stop, const std::map<std::string, std::string> & carrier);
  void send_ReadUserReviews(const int64_t req_id, const int64_t user_id, const int32_t start, const int32_t stop, const std::map<std::string, std::string> & carrier);
  void recv_ReadUserReviews(std::vector<Review> & _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class UserReviewServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<UserReviewServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (UserReviewServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_UploadUserReview(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReadUserReviews(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  UserReviewServiceProcessor(::apache::thrift::stdcxx::shared_ptr<UserReviewServiceIf> iface) :
    iface_(iface) {
    processMap_["UploadUserReview"] = &UserReviewServiceProcessor::process_UploadUserReview;
    processMap_["ReadUserReviews"] = &UserReviewServiceProcessor::process_ReadUserReviews;
  }

  virtual ~UserReviewServiceProcessor() {}
};

class UserReviewServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  UserReviewServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< UserReviewServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< UserReviewServiceIfFactory > handlerFactory_;
};

class UserReviewServiceMultiface : virtual public UserReviewServiceIf {
 public:
  UserReviewServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<UserReviewServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~UserReviewServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<UserReviewServiceIf> > ifaces_;
  UserReviewServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<UserReviewServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void UploadUserReview(const int64_t req_id, const int64_t user_id, const int64_t review_id, const int64_t timestamp, const std::map<std::string, std::string> & carrier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UploadUserReview(req_id, user_id, review_id, timestamp, carrier);
    }
    ifaces_[i]->UploadUserReview(req_id, user_id, review_id, timestamp, carrier);
  }

  void ReadUserReviews(std::vector<Review> & _return, const int64_t req_id, const int64_t user_id, const int32_t start, const int32_t stop, const std::map<std::string, std::string> & carrier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReadUserReviews(_return, req_id, user_id, start, stop, carrier);
    }
    ifaces_[i]->ReadUserReviews(_return, req_id, user_id, start, stop, carrier);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class UserReviewServiceConcurrentClient : virtual public UserReviewServiceIf {
 public:
  UserReviewServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  UserReviewServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void UploadUserReview(const int64_t req_id, const int64_t user_id, const int64_t review_id, const int64_t timestamp, const std::map<std::string, std::string> & carrier);
  int32_t send_UploadUserReview(const int64_t req_id, const int64_t user_id, const int64_t review_id, const int64_t timestamp, const std::map<std::string, std::string> & carrier);
  void recv_UploadUserReview(const int32_t seqid);
  void ReadUserReviews(std::vector<Review> & _return, const int64_t req_id, const int64_t user_id, const int32_t start, const int32_t stop, const std::map<std::string, std::string> & carrier);
  int32_t send_ReadUserReviews(const int64_t req_id, const int64_t user_id, const int32_t start, const int32_t stop, const std::map<std::string, std::string> & carrier);
  void recv_ReadUserReviews(std::vector<Review> & _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
