--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'media_service_ttypes'

ReviewStorageServiceClient = __TObject.new(__TClient, {
  __type = 'ReviewStorageServiceClient'
})

function ReviewStorageServiceClient:StoreReview(req_id, review, carrier)
  self:send_StoreReview(req_id, review, carrier)
  self:recv_StoreReview(req_id, review, carrier)
end

function ReviewStorageServiceClient:send_StoreReview(req_id, review, carrier)
  self.oprot:writeMessageBegin('StoreReview', TMessageType.CALL, self._seqid)
  local args = StoreReview_args:new{}
  args.req_id = req_id
  args.review = review
  args.carrier = carrier
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ReviewStorageServiceClient:recv_StoreReview(req_id, review, carrier)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = StoreReview_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function ReviewStorageServiceClient:ReadReviews(req_id, review_ids, carrier)
  self:send_ReadReviews(req_id, review_ids, carrier)
  return self:recv_ReadReviews(req_id, review_ids, carrier)
end

function ReviewStorageServiceClient:send_ReadReviews(req_id, review_ids, carrier)
  self.oprot:writeMessageBegin('ReadReviews', TMessageType.CALL, self._seqid)
  local args = ReadReviews_args:new{}
  args.req_id = req_id
  args.review_ids = review_ids
  args.carrier = carrier
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ReviewStorageServiceClient:recv_ReadReviews(req_id, review_ids, carrier)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = ReadReviews_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.se then
    error(result.se)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end
ReviewStorageServiceIface = __TObject:new{
  __type = 'ReviewStorageServiceIface'
}


ReviewStorageServiceProcessor = __TObject.new(__TProcessor
, {
 __type = 'ReviewStorageServiceProcessor'
})

function ReviewStorageServiceProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function ReviewStorageServiceProcessor:process_StoreReview(seqid, iprot, oprot, server_ctx)
  local args = StoreReview_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = StoreReview_result:new{}
  local status, res = pcall(self.handler.StoreReview, self.handler, args.req_id, args.review, args.carrier)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('StoreReview', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ReviewStorageServiceProcessor:process_ReadReviews(seqid, iprot, oprot, server_ctx)
  local args = ReadReviews_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = ReadReviews_result:new{}
  local status, res = pcall(self.handler.ReadReviews, self.handler, args.req_id, args.review_ids, args.carrier)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('ReadReviews', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

-- HELPER FUNCTIONS AND STRUCTURES

StoreReview_args = __TObject:new{
  req_id,
  review,
  carrier
}

function StoreReview_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.review = Review:new{}
        self.review:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.MAP then
        self.carrier = {}
        local _ktype157, _vtype158, _size156 = iprot:readMapBegin() 
        for _i=1,_size156 do
          local _key160 = iprot:readString()
          local _val161 = iprot:readString()
          self.carrier[_key160] = _val161
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function StoreReview_args:write(oprot)
  oprot:writeStructBegin('StoreReview_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.review ~= nil then
    oprot:writeFieldBegin('review', TType.STRUCT, 2)
    self.review:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.carrier ~= nil then
    oprot:writeFieldBegin('carrier', TType.MAP, 3)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.carrier))
    for kiter162,viter163 in pairs(self.carrier) do
      oprot:writeString(kiter162)
      oprot:writeString(viter163)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

StoreReview_result = __TObject:new{
  se
}

function StoreReview_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function StoreReview_result:write(oprot)
  oprot:writeStructBegin('StoreReview_result')
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ReadReviews_args = __TObject:new{
  req_id,
  review_ids,
  carrier
}

function ReadReviews_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.review_ids = {}
        local _etype167, _size164 = iprot:readListBegin()
        for _i=1,_size164 do
          local _elem168 = iprot:readI64()
          table.insert(self.review_ids, _elem168)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.MAP then
        self.carrier = {}
        local _ktype170, _vtype171, _size169 = iprot:readMapBegin() 
        for _i=1,_size169 do
          local _key173 = iprot:readString()
          local _val174 = iprot:readString()
          self.carrier[_key173] = _val174
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ReadReviews_args:write(oprot)
  oprot:writeStructBegin('ReadReviews_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.review_ids ~= nil then
    oprot:writeFieldBegin('review_ids', TType.LIST, 2)
    oprot:writeListBegin(TType.I64, #self.review_ids)
    for _,iter175 in ipairs(self.review_ids) do
      oprot:writeI64(iter175)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.carrier ~= nil then
    oprot:writeFieldBegin('carrier', TType.MAP, 3)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.carrier))
    for kiter176,viter177 in pairs(self.carrier) do
      oprot:writeString(kiter176)
      oprot:writeString(viter177)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ReadReviews_result = __TObject:new{
  success,
  se
}

function ReadReviews_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype181, _size178 = iprot:readListBegin()
        for _i=1,_size178 do
          local _elem182 = Review:new{}
          _elem182:read(iprot)
          table.insert(self.success, _elem182)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ReadReviews_result:write(oprot)
  oprot:writeStructBegin('ReadReviews_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter183 in ipairs(self.success) do
      iter183:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end