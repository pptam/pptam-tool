#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ErrorCode(object):
    SE_THRIFT_CONNPOOL_TIMEOUT = 0
    SE_THRIFT_CONN_ERROR = 1
    SE_UNAUTHORIZED = 2
    SE_MEMCACHED_ERROR = 3
    SE_MONGODB_ERROR = 4
    SE_REDIS_ERROR = 5
    SE_THRIFT_HANDLER_ERROR = 6

    _VALUES_TO_NAMES = {
        0: "SE_THRIFT_CONNPOOL_TIMEOUT",
        1: "SE_THRIFT_CONN_ERROR",
        2: "SE_UNAUTHORIZED",
        3: "SE_MEMCACHED_ERROR",
        4: "SE_MONGODB_ERROR",
        5: "SE_REDIS_ERROR",
        6: "SE_THRIFT_HANDLER_ERROR",
    }

    _NAMES_TO_VALUES = {
        "SE_THRIFT_CONNPOOL_TIMEOUT": 0,
        "SE_THRIFT_CONN_ERROR": 1,
        "SE_UNAUTHORIZED": 2,
        "SE_MEMCACHED_ERROR": 3,
        "SE_MONGODB_ERROR": 4,
        "SE_REDIS_ERROR": 5,
        "SE_THRIFT_HANDLER_ERROR": 6,
    }


class User(object):
    """
    Attributes:
     - user_id
     - first_name
     - last_name
     - username
     - password
     - salt

    """


    def __init__(self, user_id=None, first_name=None, last_name=None, username=None, password=None, salt=None,):
        self.user_id = user_id
        self.first_name = first_name
        self.last_name = last_name
        self.username = username
        self.password = password
        self.salt = salt

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.user_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.first_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.last_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.salt = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('User')
        if self.user_id is not None:
            oprot.writeFieldBegin('user_id', TType.I64, 1)
            oprot.writeI64(self.user_id)
            oprot.writeFieldEnd()
        if self.first_name is not None:
            oprot.writeFieldBegin('first_name', TType.STRING, 2)
            oprot.writeString(self.first_name.encode('utf-8') if sys.version_info[0] == 2 else self.first_name)
            oprot.writeFieldEnd()
        if self.last_name is not None:
            oprot.writeFieldBegin('last_name', TType.STRING, 3)
            oprot.writeString(self.last_name.encode('utf-8') if sys.version_info[0] == 2 else self.last_name)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 4)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 5)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.salt is not None:
            oprot.writeFieldBegin('salt', TType.STRING, 6)
            oprot.writeString(self.salt.encode('utf-8') if sys.version_info[0] == 2 else self.salt)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Review(object):
    """
    Attributes:
     - review_id
     - user_id
     - req_id
     - text
     - movie_id
     - rating
     - timestamp

    """


    def __init__(self, review_id=None, user_id=None, req_id=None, text=None, movie_id=None, rating=None, timestamp=None,):
        self.review_id = review_id
        self.user_id = user_id
        self.req_id = req_id
        self.text = text
        self.movie_id = movie_id
        self.rating = rating
        self.timestamp = timestamp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.review_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.user_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.req_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.text = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.movie_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.rating = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Review')
        if self.review_id is not None:
            oprot.writeFieldBegin('review_id', TType.I64, 1)
            oprot.writeI64(self.review_id)
            oprot.writeFieldEnd()
        if self.user_id is not None:
            oprot.writeFieldBegin('user_id', TType.I64, 2)
            oprot.writeI64(self.user_id)
            oprot.writeFieldEnd()
        if self.req_id is not None:
            oprot.writeFieldBegin('req_id', TType.I64, 3)
            oprot.writeI64(self.req_id)
            oprot.writeFieldEnd()
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 4)
            oprot.writeString(self.text.encode('utf-8') if sys.version_info[0] == 2 else self.text)
            oprot.writeFieldEnd()
        if self.movie_id is not None:
            oprot.writeFieldBegin('movie_id', TType.STRING, 5)
            oprot.writeString(self.movie_id.encode('utf-8') if sys.version_info[0] == 2 else self.movie_id)
            oprot.writeFieldEnd()
        if self.rating is not None:
            oprot.writeFieldBegin('rating', TType.I32, 6)
            oprot.writeI32(self.rating)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 7)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CastInfo(object):
    """
    Attributes:
     - cast_info_id
     - name
     - gender
     - intro

    """


    def __init__(self, cast_info_id=None, name=None, gender=None, intro=None,):
        self.cast_info_id = cast_info_id
        self.name = name
        self.gender = gender
        self.intro = intro

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.cast_info_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.gender = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.intro = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CastInfo')
        if self.cast_info_id is not None:
            oprot.writeFieldBegin('cast_info_id', TType.I64, 1)
            oprot.writeI64(self.cast_info_id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.gender is not None:
            oprot.writeFieldBegin('gender', TType.BOOL, 3)
            oprot.writeBool(self.gender)
            oprot.writeFieldEnd()
        if self.intro is not None:
            oprot.writeFieldBegin('intro', TType.STRING, 4)
            oprot.writeString(self.intro.encode('utf-8') if sys.version_info[0] == 2 else self.intro)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Cast(object):
    """
    Attributes:
     - cast_id
     - character
     - cast_info_id

    """


    def __init__(self, cast_id=None, character=None, cast_info_id=None,):
        self.cast_id = cast_id
        self.character = character
        self.cast_info_id = cast_info_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.cast_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.character = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.cast_info_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Cast')
        if self.cast_id is not None:
            oprot.writeFieldBegin('cast_id', TType.I32, 1)
            oprot.writeI32(self.cast_id)
            oprot.writeFieldEnd()
        if self.character is not None:
            oprot.writeFieldBegin('character', TType.STRING, 2)
            oprot.writeString(self.character.encode('utf-8') if sys.version_info[0] == 2 else self.character)
            oprot.writeFieldEnd()
        if self.cast_info_id is not None:
            oprot.writeFieldBegin('cast_info_id', TType.I64, 3)
            oprot.writeI64(self.cast_info_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MovieInfo(object):
    """
    Attributes:
     - movie_id
     - title
     - casts
     - plot_id
     - thumbnail_ids
     - photo_ids
     - video_ids
     - avg_rating
     - num_rating

    """


    def __init__(self, movie_id=None, title=None, casts=None, plot_id=None, thumbnail_ids=None, photo_ids=None, video_ids=None, avg_rating=None, num_rating=None,):
        self.movie_id = movie_id
        self.title = title
        self.casts = casts
        self.plot_id = plot_id
        self.thumbnail_ids = thumbnail_ids
        self.photo_ids = photo_ids
        self.video_ids = video_ids
        self.avg_rating = avg_rating
        self.num_rating = num_rating

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.movie_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.casts = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = Cast()
                        _elem5.read(iprot)
                        self.casts.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.plot_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.thumbnail_ids = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.thumbnail_ids.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.photo_ids = []
                    (_etype15, _size12) = iprot.readListBegin()
                    for _i16 in range(_size12):
                        _elem17 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.photo_ids.append(_elem17)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.video_ids = []
                    (_etype21, _size18) = iprot.readListBegin()
                    for _i22 in range(_size18):
                        _elem23 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.video_ids.append(_elem23)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.avg_rating = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.num_rating = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MovieInfo')
        if self.movie_id is not None:
            oprot.writeFieldBegin('movie_id', TType.STRING, 1)
            oprot.writeString(self.movie_id.encode('utf-8') if sys.version_info[0] == 2 else self.movie_id)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 2)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.casts is not None:
            oprot.writeFieldBegin('casts', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.casts))
            for iter24 in self.casts:
                iter24.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.plot_id is not None:
            oprot.writeFieldBegin('plot_id', TType.I64, 4)
            oprot.writeI64(self.plot_id)
            oprot.writeFieldEnd()
        if self.thumbnail_ids is not None:
            oprot.writeFieldBegin('thumbnail_ids', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.thumbnail_ids))
            for iter25 in self.thumbnail_ids:
                oprot.writeString(iter25.encode('utf-8') if sys.version_info[0] == 2 else iter25)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.photo_ids is not None:
            oprot.writeFieldBegin('photo_ids', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.photo_ids))
            for iter26 in self.photo_ids:
                oprot.writeString(iter26.encode('utf-8') if sys.version_info[0] == 2 else iter26)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.video_ids is not None:
            oprot.writeFieldBegin('video_ids', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.video_ids))
            for iter27 in self.video_ids:
                oprot.writeString(iter27.encode('utf-8') if sys.version_info[0] == 2 else iter27)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.avg_rating is not None:
            oprot.writeFieldBegin('avg_rating', TType.DOUBLE, 8)
            oprot.writeDouble(self.avg_rating)
            oprot.writeFieldEnd()
        if self.num_rating is not None:
            oprot.writeFieldBegin('num_rating', TType.I32, 9)
            oprot.writeI32(self.num_rating)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Page(object):
    """
    Attributes:
     - movie_info
     - reviews
     - cast_infos
     - plot

    """


    def __init__(self, movie_info=None, reviews=None, cast_infos=None, plot=None,):
        self.movie_info = movie_info
        self.reviews = reviews
        self.cast_infos = cast_infos
        self.plot = plot

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.movie_info = MovieInfo()
                    self.movie_info.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.reviews = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = Review()
                        _elem33.read(iprot)
                        self.reviews.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.cast_infos = []
                    (_etype37, _size34) = iprot.readListBegin()
                    for _i38 in range(_size34):
                        _elem39 = CastInfo()
                        _elem39.read(iprot)
                        self.cast_infos.append(_elem39)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.plot = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Page')
        if self.movie_info is not None:
            oprot.writeFieldBegin('movie_info', TType.STRUCT, 1)
            self.movie_info.write(oprot)
            oprot.writeFieldEnd()
        if self.reviews is not None:
            oprot.writeFieldBegin('reviews', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.reviews))
            for iter40 in self.reviews:
                iter40.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.cast_infos is not None:
            oprot.writeFieldBegin('cast_infos', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.cast_infos))
            for iter41 in self.cast_infos:
                iter41.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.plot is not None:
            oprot.writeFieldBegin('plot', TType.STRING, 4)
            oprot.writeString(self.plot.encode('utf-8') if sys.version_info[0] == 2 else self.plot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ServiceException(TException):
    """
    Attributes:
     - errorCode
     - message

    """


    def __init__(self, errorCode=None, message=None,):
        self.errorCode = errorCode
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ServiceException')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(User)
User.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'user_id', None, None, ),  # 1
    (2, TType.STRING, 'first_name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'last_name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'username', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'password', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'salt', 'UTF8', None, ),  # 6
)
all_structs.append(Review)
Review.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'review_id', None, None, ),  # 1
    (2, TType.I64, 'user_id', None, None, ),  # 2
    (3, TType.I64, 'req_id', None, None, ),  # 3
    (4, TType.STRING, 'text', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'movie_id', 'UTF8', None, ),  # 5
    (6, TType.I32, 'rating', None, None, ),  # 6
    (7, TType.I64, 'timestamp', None, None, ),  # 7
)
all_structs.append(CastInfo)
CastInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'cast_info_id', None, None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'gender', None, None, ),  # 3
    (4, TType.STRING, 'intro', 'UTF8', None, ),  # 4
)
all_structs.append(Cast)
Cast.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'cast_id', None, None, ),  # 1
    (2, TType.STRING, 'character', 'UTF8', None, ),  # 2
    (3, TType.I64, 'cast_info_id', None, None, ),  # 3
)
all_structs.append(MovieInfo)
MovieInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'movie_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'title', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'casts', (TType.STRUCT, [Cast, None], False), None, ),  # 3
    (4, TType.I64, 'plot_id', None, None, ),  # 4
    (5, TType.LIST, 'thumbnail_ids', (TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.LIST, 'photo_ids', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.LIST, 'video_ids', (TType.STRING, 'UTF8', False), None, ),  # 7
    (8, TType.DOUBLE, 'avg_rating', None, None, ),  # 8
    (9, TType.I32, 'num_rating', None, None, ),  # 9
)
all_structs.append(Page)
Page.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'movie_info', [MovieInfo, None], None, ),  # 1
    (2, TType.LIST, 'reviews', (TType.STRUCT, [Review, None], False), None, ),  # 2
    (3, TType.LIST, 'cast_infos', (TType.STRUCT, [CastInfo, None], False), None, ),  # 3
    (4, TType.STRING, 'plot', 'UTF8', None, ),  # 4
)
all_structs.append(ServiceException)
ServiceException.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
)
fix_spec(all_structs)
del all_structs
