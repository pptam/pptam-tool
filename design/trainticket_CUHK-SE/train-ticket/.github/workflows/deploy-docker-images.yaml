name: Build and Push Docker Images

on:
  push:
    branches:
      - master # 触发工作流的分支

jobs:
  build-and-push:
    if: startsWith(github.event.head_commit.message, '[build]') || startsWith(github.event.head_commit.message, '[both]')
    runs-on: self-hosted
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'adopt'
        cache: 'maven'

    - name: Build with Maven
      run: |
        mvn clean package -Dmaven.test.skip=true

    - name: Login to Harbor
      uses: docker/login-action@v3
      with:
        registry: http://${{  secrets.HARBOR_ADDR }} # 自建Harbor地址
        username: ${{ secrets.HARBOR_USERNAME }} # 存储在GitHub Secrets中的用户名
        password: ${{ secrets.HARBOR_PASSWORD }} # 存储在GitHub Secrets中的密码

    - name: Build and Push Docker Images
      run: |
        # 遍历所有子目录，查找Dockerfile并构建、推送
        for dir in $(find . -maxdepth 2 -type f -name Dockerfile -exec dirname {} \;); do
          echo "Building Docker image in directory: $dir"
          IMAGE_NAME=$(basename "$dir")
          docker build -t ${{  secrets.HARBOR_ADDR }}/library/$IMAGE_NAME:$GITHUB_SHA "$dir"
          docker push ${{  secrets.HARBOR_ADDR }}/library/$IMAGE_NAME:$GITHUB_SHA
        done
  deploy:
    needs: [build-and-push]
    if: startsWith(github.event.head_commit.message, '[deploy]') || startsWith(github.event.head_commit.message, '[both]')
    runs-on: self-hosted
    steps:
      - name: Setup Kubernetes CLI
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.29.3'
      - name: Configure Kubectl
        run: |
          echo "${{ secrets.KUBECONFIG_DATA }}" | base64 --decode > kubeconfig.yaml
          echo kubeconfig.yaml
          export KUBECONFIG=$(pwd)/kubeconfig.yaml
          kubectl cluster-info
      - uses: azure/setup-helm@v4.2.0
        with:
          version: 'latest'
      - name: Deploy to Kubernetes
        run: | 
          helm dependency build
          helm install ts manifests/helm/generic_service -n ts --create-namespace --set global.monitoring=opentelemtry --set skywalking.enabled=false --set global.image.tag=
