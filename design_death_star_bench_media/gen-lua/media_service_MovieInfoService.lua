--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


local Thrift = require 'Thrift'
local TType = Thrift.TType
local TMessageType = Thrift.TMessageType
local __TObject = Thrift.__TObject
local TApplicationException = Thrift.TApplicationException
local __TClient = Thrift.__TClient
local __TProcessor = Thrift.__TProcessor
local ttype = Thrift.ttype
local ttable_size = Thrift.ttable_size
local media_service_ttypes = require 'media_service_ttypes'
local ServiceException = media_service_ttypes.ServiceException
local MovieInfo = media_service_ttypes.MovieInfo
local Cast = media_service_ttypes.Cast

-- HELPER FUNCTIONS AND STRUCTURES

local WriteMovieInfo_args = __TObject:new{
  req_id,
  movie_id,
  title,
  casts,
  plot_id,
  thumbnail_ids,
  photo_ids,
  video_ids,
  avg_rating,
  num_rating,
  carrier
}

function WriteMovieInfo_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.movie_id = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.title = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.LIST then
        self.casts = {}
        local _etype275, _size272 = iprot:readListBegin()
        for _i=1,_size272 do
          local _elem276 = Cast:new{}
          _elem276:read(iprot)
          table.insert(self.casts, _elem276)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I64 then
        self.plot_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.LIST then
        self.thumbnail_ids = {}
        local _etype280, _size277 = iprot:readListBegin()
        for _i=1,_size277 do
          local _elem281 = iprot:readString()
          table.insert(self.thumbnail_ids, _elem281)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.LIST then
        self.photo_ids = {}
        local _etype285, _size282 = iprot:readListBegin()
        for _i=1,_size282 do
          local _elem286 = iprot:readString()
          table.insert(self.photo_ids, _elem286)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.LIST then
        self.video_ids = {}
        local _etype290, _size287 = iprot:readListBegin()
        for _i=1,_size287 do
          local _elem291 = iprot:readString()
          table.insert(self.video_ids, _elem291)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.STRING then
        self.avg_rating = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.num_rating = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.MAP then
        self.carrier = {}
        local _ktype293, _vtype294, _size292 = iprot:readMapBegin()
        for _i=1,_size292 do
          local _key296 = iprot:readString()
          local _val297 = iprot:readString()
          self.carrier[_key296] = _val297
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function WriteMovieInfo_args:write(oprot)
  oprot:writeStructBegin('WriteMovieInfo_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.movie_id ~= nil then
    oprot:writeFieldBegin('movie_id', TType.STRING, 2)
    oprot:writeString(self.movie_id)
    oprot:writeFieldEnd()
  end
  if self.title ~= nil then
    oprot:writeFieldBegin('title', TType.STRING, 3)
    oprot:writeString(self.title)
    oprot:writeFieldEnd()
  end
  if self.casts ~= nil then
    oprot:writeFieldBegin('casts', TType.LIST, 4)
    oprot:writeListBegin(TType.STRUCT, #self.casts)
    for _,iter298 in ipairs(self.casts) do
      iter298:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.plot_id ~= nil then
    oprot:writeFieldBegin('plot_id', TType.I64, 5)
    oprot:writeI64(self.plot_id)
    oprot:writeFieldEnd()
  end
  if self.thumbnail_ids ~= nil then
    oprot:writeFieldBegin('thumbnail_ids', TType.LIST, 6)
    oprot:writeListBegin(TType.STRING, #self.thumbnail_ids)
    for _,iter299 in ipairs(self.thumbnail_ids) do
      oprot:writeString(iter299)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.photo_ids ~= nil then
    oprot:writeFieldBegin('photo_ids', TType.LIST, 7)
    oprot:writeListBegin(TType.STRING, #self.photo_ids)
    for _,iter300 in ipairs(self.photo_ids) do
      oprot:writeString(iter300)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.video_ids ~= nil then
    oprot:writeFieldBegin('video_ids', TType.LIST, 8)
    oprot:writeListBegin(TType.STRING, #self.video_ids)
    for _,iter301 in ipairs(self.video_ids) do
      oprot:writeString(iter301)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.avg_rating ~= nil then
    oprot:writeFieldBegin('avg_rating', TType.STRING, 9)
    oprot:writeString(self.avg_rating)
    oprot:writeFieldEnd()
  end
  if self.num_rating ~= nil then
    oprot:writeFieldBegin('num_rating', TType.I32, 10)
    oprot:writeI32(self.num_rating)
    oprot:writeFieldEnd()
  end
  if self.carrier ~= nil then
    oprot:writeFieldBegin('carrier', TType.MAP, 11)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.carrier))
    for kiter302,viter303 in pairs(self.carrier) do
      oprot:writeString(kiter302)
      oprot:writeString(viter303)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local WriteMovieInfo_result = __TObject:new{
  se
}

function WriteMovieInfo_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function WriteMovieInfo_result:write(oprot)
  oprot:writeStructBegin('WriteMovieInfo_result')
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local ReadMovieInfo_args = __TObject:new{
  req_id,
  movie_id,
  carrier
}

function ReadMovieInfo_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.movie_id = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.MAP then
        self.carrier = {}
        local _ktype305, _vtype306, _size304 = iprot:readMapBegin()
        for _i=1,_size304 do
          local _key308 = iprot:readString()
          local _val309 = iprot:readString()
          self.carrier[_key308] = _val309
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ReadMovieInfo_args:write(oprot)
  oprot:writeStructBegin('ReadMovieInfo_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.movie_id ~= nil then
    oprot:writeFieldBegin('movie_id', TType.STRING, 2)
    oprot:writeString(self.movie_id)
    oprot:writeFieldEnd()
  end
  if self.carrier ~= nil then
    oprot:writeFieldBegin('carrier', TType.MAP, 3)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.carrier))
    for kiter310,viter311 in pairs(self.carrier) do
      oprot:writeString(kiter310)
      oprot:writeString(viter311)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local ReadMovieInfo_result = __TObject:new{
  success,
  se
}

function ReadMovieInfo_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = MovieInfo:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ReadMovieInfo_result:write(oprot)
  oprot:writeStructBegin('ReadMovieInfo_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local UpdateRating_args = __TObject:new{
  req_id,
  movie_id,
  sum_uncommitted_rating,
  num_uncommitted_rating,
  carrier
}

function UpdateRating_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.movie_id = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.sum_uncommitted_rating = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.num_uncommitted_rating = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.MAP then
        self.carrier = {}
        local _ktype313, _vtype314, _size312 = iprot:readMapBegin()
        for _i=1,_size312 do
          local _key316 = iprot:readString()
          local _val317 = iprot:readString()
          self.carrier[_key316] = _val317
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UpdateRating_args:write(oprot)
  oprot:writeStructBegin('UpdateRating_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.movie_id ~= nil then
    oprot:writeFieldBegin('movie_id', TType.STRING, 2)
    oprot:writeString(self.movie_id)
    oprot:writeFieldEnd()
  end
  if self.sum_uncommitted_rating ~= nil then
    oprot:writeFieldBegin('sum_uncommitted_rating', TType.I32, 3)
    oprot:writeI32(self.sum_uncommitted_rating)
    oprot:writeFieldEnd()
  end
  if self.num_uncommitted_rating ~= nil then
    oprot:writeFieldBegin('num_uncommitted_rating', TType.I32, 4)
    oprot:writeI32(self.num_uncommitted_rating)
    oprot:writeFieldEnd()
  end
  if self.carrier ~= nil then
    oprot:writeFieldBegin('carrier', TType.MAP, 5)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.carrier))
    for kiter318,viter319 in pairs(self.carrier) do
      oprot:writeString(kiter318)
      oprot:writeString(viter319)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local UpdateRating_result = __TObject:new{
  se
}

function UpdateRating_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UpdateRating_result:write(oprot)
  oprot:writeStructBegin('UpdateRating_result')
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local MovieInfoServiceClient = __TObject.new(__TClient, {
  __type = 'MovieInfoServiceClient'
})

function MovieInfoServiceClient:WriteMovieInfo(req_id, movie_id, title, casts, plot_id, thumbnail_ids, photo_ids, video_ids, avg_rating, num_rating, carrier)
  self:send_WriteMovieInfo(req_id, movie_id, title, casts, plot_id, thumbnail_ids, photo_ids, video_ids, avg_rating, num_rating, carrier)
  self:recv_WriteMovieInfo(req_id, movie_id, title, casts, plot_id, thumbnail_ids, photo_ids, video_ids, avg_rating, num_rating, carrier)
end

function MovieInfoServiceClient:send_WriteMovieInfo(req_id, movie_id, title, casts, plot_id, thumbnail_ids, photo_ids, video_ids, avg_rating, num_rating, carrier)
  self.oprot:writeMessageBegin('WriteMovieInfo', TMessageType.CALL, self._seqid)
  local args = WriteMovieInfo_args:new{}
  args.req_id = req_id
  args.movie_id = movie_id
  args.title = title
  args.casts = casts
  args.plot_id = plot_id
  args.thumbnail_ids = thumbnail_ids
  args.photo_ids = photo_ids
  args.video_ids = video_ids
  args.avg_rating = avg_rating
  args.num_rating = num_rating
  args.carrier = carrier
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function MovieInfoServiceClient:recv_WriteMovieInfo(req_id, movie_id, title, casts, plot_id, thumbnail_ids, photo_ids, video_ids, avg_rating, num_rating, carrier)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = WriteMovieInfo_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.se then
    error(result.se)
  end
end

function MovieInfoServiceClient:ReadMovieInfo(req_id, movie_id, carrier)
  self:send_ReadMovieInfo(req_id, movie_id, carrier)
  return self:recv_ReadMovieInfo(req_id, movie_id, carrier)
end

function MovieInfoServiceClient:send_ReadMovieInfo(req_id, movie_id, carrier)
  self.oprot:writeMessageBegin('ReadMovieInfo', TMessageType.CALL, self._seqid)
  local args = ReadMovieInfo_args:new{}
  args.req_id = req_id
  args.movie_id = movie_id
  args.carrier = carrier
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function MovieInfoServiceClient:recv_ReadMovieInfo(req_id, movie_id, carrier)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = ReadMovieInfo_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.se then
    error(result.se)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function MovieInfoServiceClient:UpdateRating(req_id, movie_id, sum_uncommitted_rating, num_uncommitted_rating, carrier)
  self:send_UpdateRating(req_id, movie_id, sum_uncommitted_rating, num_uncommitted_rating, carrier)
  self:recv_UpdateRating(req_id, movie_id, sum_uncommitted_rating, num_uncommitted_rating, carrier)
end

function MovieInfoServiceClient:send_UpdateRating(req_id, movie_id, sum_uncommitted_rating, num_uncommitted_rating, carrier)
  self.oprot:writeMessageBegin('UpdateRating', TMessageType.CALL, self._seqid)
  local args = UpdateRating_args:new{}
  args.req_id = req_id
  args.movie_id = movie_id
  args.sum_uncommitted_rating = sum_uncommitted_rating
  args.num_uncommitted_rating = num_uncommitted_rating
  args.carrier = carrier
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function MovieInfoServiceClient:recv_UpdateRating(req_id, movie_id, sum_uncommitted_rating, num_uncommitted_rating, carrier)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = UpdateRating_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.se then
    error(result.se)
  end
end
local MovieInfoServiceIface = __TObject:new{
  __type = 'MovieInfoServiceIface'
}


local MovieInfoServiceProcessor = __TObject.new(__TProcessor
, {
 __type = 'MovieInfoServiceProcessor'
})

function MovieInfoServiceProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function MovieInfoServiceProcessor:process_WriteMovieInfo(seqid, iprot, oprot, server_ctx)
  local args = WriteMovieInfo_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = WriteMovieInfo_result:new{}
  local status, res = pcall(self.handler.WriteMovieInfo, self.handler, args.req_id, args.movie_id, args.title, args.casts, args.plot_id, args.thumbnail_ids, args.photo_ids, args.video_ids, args.avg_rating, args.num_rating, args.carrier)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('WriteMovieInfo', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function MovieInfoServiceProcessor:process_ReadMovieInfo(seqid, iprot, oprot, server_ctx)
  local args = ReadMovieInfo_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = ReadMovieInfo_result:new{}
  local status, res = pcall(self.handler.ReadMovieInfo, self.handler, args.req_id, args.movie_id, args.carrier)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('ReadMovieInfo', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function MovieInfoServiceProcessor:process_UpdateRating(seqid, iprot, oprot, server_ctx)
  local args = UpdateRating_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = UpdateRating_result:new{}
  local status, res = pcall(self.handler.UpdateRating, self.handler, args.req_id, args.movie_id, args.sum_uncommitted_rating, args.num_uncommitted_rating, args.carrier)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('UpdateRating', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

return MovieInfoServiceClient