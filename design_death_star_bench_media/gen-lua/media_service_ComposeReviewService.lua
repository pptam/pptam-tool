--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'media_service_ttypes'

ComposeReviewServiceClient = __TObject.new(__TClient, {
  __type = 'ComposeReviewServiceClient'
})

function ComposeReviewServiceClient:UploadText(req_id, text, carrier)
  self:send_UploadText(req_id, text, carrier)
  self:recv_UploadText(req_id, text, carrier)
end

function ComposeReviewServiceClient:send_UploadText(req_id, text, carrier)
  self.oprot:writeMessageBegin('UploadText', TMessageType.CALL, self._seqid)
  local args = UploadText_args:new{}
  args.req_id = req_id
  args.text = text
  args.carrier = carrier
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ComposeReviewServiceClient:recv_UploadText(req_id, text, carrier)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = UploadText_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function ComposeReviewServiceClient:UploadRating(req_id, rating, carrier)
  self:send_UploadRating(req_id, rating, carrier)
  self:recv_UploadRating(req_id, rating, carrier)
end

function ComposeReviewServiceClient:send_UploadRating(req_id, rating, carrier)
  self.oprot:writeMessageBegin('UploadRating', TMessageType.CALL, self._seqid)
  local args = UploadRating_args:new{}
  args.req_id = req_id
  args.rating = rating
  args.carrier = carrier
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ComposeReviewServiceClient:recv_UploadRating(req_id, rating, carrier)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = UploadRating_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function ComposeReviewServiceClient:UploadMovieId(req_id, movie_id, carrier)
  self:send_UploadMovieId(req_id, movie_id, carrier)
  self:recv_UploadMovieId(req_id, movie_id, carrier)
end

function ComposeReviewServiceClient:send_UploadMovieId(req_id, movie_id, carrier)
  self.oprot:writeMessageBegin('UploadMovieId', TMessageType.CALL, self._seqid)
  local args = UploadMovieId_args:new{}
  args.req_id = req_id
  args.movie_id = movie_id
  args.carrier = carrier
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ComposeReviewServiceClient:recv_UploadMovieId(req_id, movie_id, carrier)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = UploadMovieId_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function ComposeReviewServiceClient:UploadUniqueId(req_id, unique_id, carrier)
  self:send_UploadUniqueId(req_id, unique_id, carrier)
  self:recv_UploadUniqueId(req_id, unique_id, carrier)
end

function ComposeReviewServiceClient:send_UploadUniqueId(req_id, unique_id, carrier)
  self.oprot:writeMessageBegin('UploadUniqueId', TMessageType.CALL, self._seqid)
  local args = UploadUniqueId_args:new{}
  args.req_id = req_id
  args.unique_id = unique_id
  args.carrier = carrier
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ComposeReviewServiceClient:recv_UploadUniqueId(req_id, unique_id, carrier)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = UploadUniqueId_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function ComposeReviewServiceClient:UploadUserId(req_id, user_id, carrier)
  self:send_UploadUserId(req_id, user_id, carrier)
  self:recv_UploadUserId(req_id, user_id, carrier)
end

function ComposeReviewServiceClient:send_UploadUserId(req_id, user_id, carrier)
  self.oprot:writeMessageBegin('UploadUserId', TMessageType.CALL, self._seqid)
  local args = UploadUserId_args:new{}
  args.req_id = req_id
  args.user_id = user_id
  args.carrier = carrier
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ComposeReviewServiceClient:recv_UploadUserId(req_id, user_id, carrier)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = UploadUserId_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end
ComposeReviewServiceIface = __TObject:new{
  __type = 'ComposeReviewServiceIface'
}


ComposeReviewServiceProcessor = __TObject.new(__TProcessor
, {
 __type = 'ComposeReviewServiceProcessor'
})

function ComposeReviewServiceProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function ComposeReviewServiceProcessor:process_UploadText(seqid, iprot, oprot, server_ctx)
  local args = UploadText_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = UploadText_result:new{}
  local status, res = pcall(self.handler.UploadText, self.handler, args.req_id, args.text, args.carrier)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('UploadText', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ComposeReviewServiceProcessor:process_UploadRating(seqid, iprot, oprot, server_ctx)
  local args = UploadRating_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = UploadRating_result:new{}
  local status, res = pcall(self.handler.UploadRating, self.handler, args.req_id, args.rating, args.carrier)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('UploadRating', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ComposeReviewServiceProcessor:process_UploadMovieId(seqid, iprot, oprot, server_ctx)
  local args = UploadMovieId_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = UploadMovieId_result:new{}
  local status, res = pcall(self.handler.UploadMovieId, self.handler, args.req_id, args.movie_id, args.carrier)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('UploadMovieId', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ComposeReviewServiceProcessor:process_UploadUniqueId(seqid, iprot, oprot, server_ctx)
  local args = UploadUniqueId_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = UploadUniqueId_result:new{}
  local status, res = pcall(self.handler.UploadUniqueId, self.handler, args.req_id, args.unique_id, args.carrier)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('UploadUniqueId', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ComposeReviewServiceProcessor:process_UploadUserId(seqid, iprot, oprot, server_ctx)
  local args = UploadUserId_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = UploadUserId_result:new{}
  local status, res = pcall(self.handler.UploadUserId, self.handler, args.req_id, args.user_id, args.carrier)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('UploadUserId', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

-- HELPER FUNCTIONS AND STRUCTURES

UploadText_args = __TObject:new{
  req_id,
  text,
  carrier
}

function UploadText_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.text = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.MAP then
        self.carrier = {}
        local _ktype117, _vtype118, _size116 = iprot:readMapBegin() 
        for _i=1,_size116 do
          local _key120 = iprot:readString()
          local _val121 = iprot:readString()
          self.carrier[_key120] = _val121
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UploadText_args:write(oprot)
  oprot:writeStructBegin('UploadText_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.text ~= nil then
    oprot:writeFieldBegin('text', TType.STRING, 2)
    oprot:writeString(self.text)
    oprot:writeFieldEnd()
  end
  if self.carrier ~= nil then
    oprot:writeFieldBegin('carrier', TType.MAP, 3)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.carrier))
    for kiter122,viter123 in pairs(self.carrier) do
      oprot:writeString(kiter122)
      oprot:writeString(viter123)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UploadText_result = __TObject:new{
  se
}

function UploadText_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UploadText_result:write(oprot)
  oprot:writeStructBegin('UploadText_result')
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UploadRating_args = __TObject:new{
  req_id,
  rating,
  carrier
}

function UploadRating_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.rating = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.MAP then
        self.carrier = {}
        local _ktype125, _vtype126, _size124 = iprot:readMapBegin() 
        for _i=1,_size124 do
          local _key128 = iprot:readString()
          local _val129 = iprot:readString()
          self.carrier[_key128] = _val129
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UploadRating_args:write(oprot)
  oprot:writeStructBegin('UploadRating_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.rating ~= nil then
    oprot:writeFieldBegin('rating', TType.I32, 2)
    oprot:writeI32(self.rating)
    oprot:writeFieldEnd()
  end
  if self.carrier ~= nil then
    oprot:writeFieldBegin('carrier', TType.MAP, 3)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.carrier))
    for kiter130,viter131 in pairs(self.carrier) do
      oprot:writeString(kiter130)
      oprot:writeString(viter131)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UploadRating_result = __TObject:new{
  se
}

function UploadRating_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UploadRating_result:write(oprot)
  oprot:writeStructBegin('UploadRating_result')
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UploadMovieId_args = __TObject:new{
  req_id,
  movie_id,
  carrier
}

function UploadMovieId_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.movie_id = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.MAP then
        self.carrier = {}
        local _ktype133, _vtype134, _size132 = iprot:readMapBegin() 
        for _i=1,_size132 do
          local _key136 = iprot:readString()
          local _val137 = iprot:readString()
          self.carrier[_key136] = _val137
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UploadMovieId_args:write(oprot)
  oprot:writeStructBegin('UploadMovieId_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.movie_id ~= nil then
    oprot:writeFieldBegin('movie_id', TType.STRING, 2)
    oprot:writeString(self.movie_id)
    oprot:writeFieldEnd()
  end
  if self.carrier ~= nil then
    oprot:writeFieldBegin('carrier', TType.MAP, 3)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.carrier))
    for kiter138,viter139 in pairs(self.carrier) do
      oprot:writeString(kiter138)
      oprot:writeString(viter139)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UploadMovieId_result = __TObject:new{
  se
}

function UploadMovieId_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UploadMovieId_result:write(oprot)
  oprot:writeStructBegin('UploadMovieId_result')
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UploadUniqueId_args = __TObject:new{
  req_id,
  unique_id,
  carrier
}

function UploadUniqueId_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.unique_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.MAP then
        self.carrier = {}
        local _ktype141, _vtype142, _size140 = iprot:readMapBegin() 
        for _i=1,_size140 do
          local _key144 = iprot:readString()
          local _val145 = iprot:readString()
          self.carrier[_key144] = _val145
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UploadUniqueId_args:write(oprot)
  oprot:writeStructBegin('UploadUniqueId_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.unique_id ~= nil then
    oprot:writeFieldBegin('unique_id', TType.I64, 2)
    oprot:writeI64(self.unique_id)
    oprot:writeFieldEnd()
  end
  if self.carrier ~= nil then
    oprot:writeFieldBegin('carrier', TType.MAP, 3)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.carrier))
    for kiter146,viter147 in pairs(self.carrier) do
      oprot:writeString(kiter146)
      oprot:writeString(viter147)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UploadUniqueId_result = __TObject:new{
  se
}

function UploadUniqueId_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UploadUniqueId_result:write(oprot)
  oprot:writeStructBegin('UploadUniqueId_result')
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UploadUserId_args = __TObject:new{
  req_id,
  user_id,
  carrier
}

function UploadUserId_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.user_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.MAP then
        self.carrier = {}
        local _ktype149, _vtype150, _size148 = iprot:readMapBegin() 
        for _i=1,_size148 do
          local _key152 = iprot:readString()
          local _val153 = iprot:readString()
          self.carrier[_key152] = _val153
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UploadUserId_args:write(oprot)
  oprot:writeStructBegin('UploadUserId_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.user_id ~= nil then
    oprot:writeFieldBegin('user_id', TType.I64, 2)
    oprot:writeI64(self.user_id)
    oprot:writeFieldEnd()
  end
  if self.carrier ~= nil then
    oprot:writeFieldBegin('carrier', TType.MAP, 4)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.carrier))
    for kiter154,viter155 in pairs(self.carrier) do
      oprot:writeString(kiter154)
      oprot:writeString(viter155)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UploadUserId_result = __TObject:new{
  se
}

function UploadUserId_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UploadUserId_result:write(oprot)
  oprot:writeStructBegin('UploadUserId_result')
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end